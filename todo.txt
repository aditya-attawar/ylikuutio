TODO list:
Tasks in priority order in descending priority, the most urgent ones first. Check when ready and move to the section Ready, when ready.

Tasks which are necessary for the development of Ylikuutio:
[ ] Implement `Camera` entities.
[ ] Optimize `Symbiosis` entities' rendering by going through `SymbiontMaterial`->`SymbiontSpecies`->`Biont` hierarchy.
[ ] Implement support for `man` command in console (a container class with the command callback together with the `man` text for the command).
[ ] Implement command line parameter `--debug` to Ajokki (log all kinds of debug information).
[ ] Implement command line parameter `--headless` to Ajokki (do not open any windows).
[ ] Implement command line parameter `--input-file` to Ajokki (load keypresses and keyreleases from a file, eg. `--input-file foo` or `--input-file=foo`).
[ ] Implement command line parameter `--window-size` to Ajokki (eg. `--window-size 1920x1080` or `--window-size=1920x1080`).
[ ] Implement support for 3D model of Helsinki: http://www.hri.fi/en/dataset/helsingin-3d-kaupunkimalli http://www.hri.fi/fi/dataset/helsingin-3d-kaupunkimalli
[ ] Implement support for OpenStreetMap data: https://www.openstreetmap.org/
[ ] Implement voxel world.
[ ] Implement AI objects (robots).
[ ] Add scene loading command `load` into console.
[ ] Implement `play` console command for playing `Sound`s and `Playlist`s.
[ ] Implement `pause` console command for pausing `Sound`s and `Playlist`s.
[ ] Implement `next` console command for changing to the next `Sound` in a `Playlist`.
[ ] Implement `prev` console command for changing to the previous `Sound` in a `Playlist`.
[ ] Move main loop out of `main` function and away from Ajokki into `ontology::Universe` class of Ylikuutio.
[ ] Implement support for custom keyboard settings.
[ ] Use GLFW Android port for Android builds. https://github.com/glfw/glfw/issues/611 https://github.com/xCuri0/glfw-android-example
[ ] Use GLFM library (only for Android builds). https://github.com/brackeen/glfm
[ ] Add variable `text_size`.
[ ] Add variable `direction`.
[ ] Use TinySpline.
[ ] Add bicubic interpolation.
[ ] Add spline interpolation.
[ ] Variable `triangulation`: `set triangulation bilinear`/`set triangulation bicubic`/`set triangulation southwest_northeast`/`set triangulation southeast_northwest`.
[ ] Write integration tests for Ajokki.
[ ] Learn how to write unit tests for multithreaded C++ code.
[ ] Implement scene loading which works in the background.
[ ] Create a vertex graph of the vertices and edges of a scene.
[ ] Implement vertex selection and modification (with a mouse cursor), using ray casting.
[ ] Implement modifying of vertices.
[ ] Implement octree segmentation.
[ ] Implement frustrum culling.
[ ] Implement generation of terrain meshes in different levels of detail (LOD) using different `x_step`s and `z_step`s (eg. 1, 2, 4, 8, 16, 32, 64, 128).
[ ] Implement terrain mesh LOD selection based on the distance between the camera and the terrain.
[ ] Implement terrain mesh LOD selection based on the distance between the camera and the terrain and the available video memory.
[ ] Implement A* route finding.
[ ] Implement Theta* route finding.
[ ] Implement support for vector fonts.
[ ] Implement rendering into a texture.
[ ] Implement TinyScheme support for programming of AI objects (robots).
[ ] Implement dynamic not flowing water.
[ ] Implement physics modeling.
[ ] Implement flowing water (computed on a server).
[ ] Implement Internet code (ASIO).
[ ] Implement Internet code (cpp-netlib).
[ ] Implement support for automatic detection of optimal window size.
[ ] Implement support for changing window size.
[ ] Implement support for changing font size.
[ ] Create `audio::Sound` class, whose parent is `Entity`.
[ ] Create `audio::PlayList` class, whose parent is `Entity`.

Less urgent:
[ ] Implement TinyScheme support in console.
[ ] Implement support for 3D text.
[ ] Implement support for partially transparent text.
[ ] Implement support for over 3D objects (`class HighDimensionalSpecies`, `class HighDimensionalObject`). projected into 3D space in `HighDimensionalObject::render()`).
[ ] Store each robot's current view into an array from which the robot may access it programmatically using C++ and/or GLSL.
[ ] Implement simulation of contour detection processing in the primary visual cortex (V1).
[ ] Implement simulation of contour detection processing in V2 (visual cortex area).

Ready:
[x] Add test VBO, eg. some kind of particle object.
[x] Define an object class.
[x] Add support for several vertex buffer objects (VBO).
[x] `string.h` -> `cstring`.
[x] `strcmp` -> `std::strcmp`.
[x] `strlen` -> `std::strlen`.
[x] Implement callbacks.
[x] Test functioning of callbacks.
[x] Add console (it opens with key `).
[x] Enable naming of entities of any level in entity hierarchy.
[x] Add scrolling into console when the 'window' gets full.
[x] Add command `info` into console (tells about entities, eg. number of vertices of an objects etc. information).
[x] Add variable `horizontal_angle`.
[x] Add variable `vertical_angle`.
[x] Add variable `right`.
[x] Add variable `up`.
[x] Add variable `window_width`.
[x] Add variable `window_height`.
[x] Add `set wireframe true`, `set wireframe false`.
[x] Add support for command line parameters in Ajokki.
[x] Add variable `wireframe`: `set wireframe true` / `set wireframe false`.
[x] Add object listing command `info` into console.
[x] Add entity-specific pre-render and post-render callbacks `prerender_callback` and `postrender_callback`.
[x] Add audio with SFML.
[x] Add support for an initial rotation for `Object`s.
[x] Implement `Symbiosis` entities.
[x] Bind each `Biont` also to its corresponding `SymbiontSpecies` (and also unbind from its corresponding `SymbiontSpecies`).
[x] Implement `Entity`-specific variables.
