TODO list:
Tasks in priority order in descending priority, the most urgent ones first. Check when ready and move to the section Ready, when ready.

Tasks which are necessary for the development of Ylikuutio:
[ ] Add support for an initial rotation for `Object`s.
[ ] Add support for `man` command in console (a container class with the command callback together with the `man` text for the command).
[ ] Add command line parameter `--debug` to Ajokki (log all kinds of debug information).
[ ] Add command line parameter `--headless` to Ajokki (do not open any windows).
[ ] Add command line parameter `--input-file` to Ajokki (load keypresses and keyreleases from a file, eg. `--input-file foo` or `--input-file=foo`).
[ ] Add support for 3D model of Helsinki: http://www.hri.fi/en/dataset/helsingin-3d-kaupunkimalli http://www.hri.fi/fi/dataset/helsingin-3d-kaupunkimalli
[ ] Add support for OpenStreetMap data: https://www.openstreetmap.org/
[ ] Add voxel world.
[ ] Add AI objects (robots).
[ ] Add scene loading command `load` into console.
[ ] Add audio playing command `play` into console.
[ ] Move main loop out of `main` function and away from Ajokki into `ontology::Universe` class of Ylikuutio.
[ ] Add support for custom keyboard settings.
[ ] Add support for camera objects..
[ ] Use GLFW Android port for Android builds. https://github.com/glfw/glfw/issues/611 https://github.com/xCuri0/glfw-android-example
[ ] Use GLFM library (only for Android builds). https://github.com/brackeen/glfm
[ ] Add variable `text_size`.
[ ] Add variable `direction`.
[ ] Use TinySpline.
[ ] Add bicubic interpolation.
[ ] Add spline interpolation.
[ ] Variable `triangulation`: `set triangulation bilinear`/`set triangulation bicubic`/`set triangulation southwest_northeast`/`set triangulation southeast_northwest`.
[ ] Write integration tests for Ajokki.
[ ] Learn how to write unit tests for multithreaded C++ code.
[ ] Implement scene loading which works in the background.
[ ] Create a graph of the vertices and edges of a scene.
[ ] Add vertex selection and modification (with a mouse cursor), using ray casting.
[ ] Add modifying of vertices.
[ ] Add octree segmentation.
[ ] Add A* route finding.
[ ] Add Theta* route finding.
[ ] Add support for vector fonts.
[ ] Add TinyScheme support for programming of AI objects (robots).
[ ] Enable changing of variable `up` in the console with `set up`.
[ ] Enable changing of variable `right` in the console with `set right`.
[ ] Add dynamic not flowing water.
[ ] Add physics modeling.
[ ] Add flowing water (computed with a server).
[ ] Add Internet code (ASIO).
[ ] Add support for changing window size.

Less urgent:
[ ] Add TinyScheme support in console.
[ ] Add support for 3D text.
[ ] Add support for partially transparent text.
[ ] Add support for over 3-dimensional objects (projected into 3D space in `Object::render()`).
[ ] Store each robot's current view into an array from which the robot may access it programmatically using C++ and/or GLSL.
[ ] Implement simulation of primary visual cortex (V1).
[ ] Implement simulation of V2.

Ready:
[x] Add test VBO, eg. some kind of particle object.
[x] Define an object class.
[x] Add support for several vertex buffer objects (VBO).
[x] `string.h` -> `cstring`.
[x] `strcmp` -> `std::strcmp`.
[x] `strlen` -> `std::strlen`.
[x] Implement callbacks.
[x] Test functioning of callbacks.
[x] Add console (it opens with key `).
[x] Enable naming of entities of any level in entity hierarchy.
[x] Add scrolling into console when the 'window' gets full.
[x] Add command `info` into console (tells about entities, eg. number of vertices of an objects etc. information).
[x] Add variable `horizontal_angle`.
[x] Add variable `vertical_angle`.
[x] Add variable `right`.
[x] Add variable `up`.
[x] Add variable `window_width`.
[x] Add variable `window_height`.
[x] Add `set wireframe true`, `set wireframe false`.
[x] Add support for command line parameters in Ajokki.
[x] Add variable `wireframe`: `set wireframe true` / `set wireframe false`.
[x] Add object listing command `info` into console.
[x] Add entity-specific pre-render and post-render callbacks `prerender_callback` and `postrender_callback`.
[x] Add audio with SFML.
