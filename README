Ylikuutio. A 3D game and simulation engine.

A hobby project of mine. Work in progress.

Ylikuutio 3D engine is under The GNU General Public License 3, or
(at your option) any later version. See LICENSE file. Please note that
my other software products which use Ylikuutio 3D engine are not
necessarily under The GNU General Public License 3 and may have more
restrictive licenses. All my code copyright (C) 2016 Antti Nuortimo.

The code from http://www.opengl-tutorial.org/ is under
the license conditions stated on opengl-tutorial website:
WTF Public License, version 2, December 2004:
"You just DO WHAT THE FUCK YOU WANT TO. ```"
http://www.opengl-tutorial.org/download/

Chibi-Scheme is licensed under the license conditions stated on
Chibi-Scheme website:
https://github.com/ashinn/chibi-scheme/blob/master/COPYING

FastNoiseSIMD is licensed under the MIT license.
https://github.com/Auburns/FastNoiseSIMD/blob/master/LICENSE

The OpenGL Extension Wrangler Library (GLEW) is licensed
under the Modified BSD License, the Mesa 3-D License (MIT)
and the Khronos License (MIT).
https://github.com/nigels-com/glew#copyright-and-licensing

GLFW is licensed under the zlib/libpng license.
http://www.glfw.org/license.html

OpenGL Mathematics (GLM) is licensed under The Happy Bunny License
and MIT License.
http://glm.g-truc.net/copying.txt

Other resources are under their respective licenses.

Grass texture is from Free Seamless Green Grass Textures:
http://www.brusheezy.com/textures/20185-seamless-green-grass-textures

Pink Marble Pavers Or Tiles Background Texture is from www.myfreetextures.com .
pavers1b2.bmp is scaled down and converted into BMP from the original pavers1b2.jpg .
http://www.myfreetextures.com/marbles-pavers-tiles-background-texture/
License conditions are available on www.myfreetextures.com website:
http://www.myfreetextures.com/sample-page/

UV map texture is from opengl-tutorial:
http://www.opengl-tutorial.org/beginners-tutorials/tutorial-8-basic-shading/

kongtext font is made by codeman38 (http://zone38.net/), see
res/fonts/kongtext/license.txt for the license.

Laser scanning data of Helsinki, Joensuu, and other Finnish cities is
licensed under a Creative Commons Attribution 4.0 International License (CC-BY).
Contains data from the open data of the National Land Survey of Finland.
Reference system is ETRS-TM35FIN and distribution format is LAZ.
http://www.maanmittauslaitos.fi/en/professionals/digital-products/datasets-free-charge/terms-use-license/national-land-survey-open-data-cc-40-licence

Shuttle Radar Topography Mission (SRTM) data around Bolivian altiplano and
elsewhere in the world between 56° S and 60° N is in the public domain.
SRTM is a NASA (National Aeronautics and Space Administration) mission.
SRTM data shipped with Ylikuutio belongs to SRTMGL3 dataset.
OpenStreetMap Wiki provides information about different SRTM datasets:
http://wiki.openstreetmap.org/wiki/SRTM

Suzanne the monkey is a standard Blender object. According to Blender
license information: "All your artwork – images or movie files –
including the .blend files and other data files Blender can write,
is free for you to use as you like." Ylikuutio does not contain
any code from Blender, however. Blender itself is released under
the GNU General Public License (GPL) 2 or later.
https://www.blender.org/about/license/

Ylikuutio can be compiled with GCC, Clang or Visual Studio.
C++11 support is required.
OpenGL 3.0 or newer is required.
CMake 2.6.2 or newer is needed for compiling process.
CMake uses git for downloading Google Test testing framework.

In Linux it's simple.

First, install all the necessary compilers, tools and libs. You may use
your favorite package manager such as aptitude, apt-get, yum etc.
You all need these packages: cmake make g++ gcc libx11-dev libxi-dev libgl1-mesa-dev libglu1-mesa-dev libxcursor-dev libxrandr-dev libxext-dev libxi-dev libxinerama-dev
Eg. with aptitude:

$ sudo aptitude install cmake make g++ gcc libx11-dev libxi-dev libgl1-mesa-dev libglu1-mesa-dev libxcursor-dev libxrandr-dev libxext-dev libxi-dev libxinerama-dev

If you are doing a cross compile for Windows under Linux, you need also:

$ sudo aptitude install gcc-mingw-w64 gcc-multilib

However, cross compiling does not work yet!

Then, to compile with GCC, in Ylikuutio install directory:

$ mkdir build
$ cd build
$ cmake ..
$ make

Or, to compile with Clang, again in Ylikuutio install directory:

$ mkdir build
$ cd build
$ export CC='/usr/bin/clang'
$ export CXX='/usr/bin/clang++'
$ cmake ..
$ make

If you have problems compiling tests or for some other reason don't want
to compile tests, in CMakeLists.txt comment out the line that says:
set(DO_UNIT_TESTS_WITH_GOOGLE_TEST true)

If you are cross compiling for Windows under Linux, you need to
uncomment the corresponding line in CMakeLists.txt:
# set(CROSS_COMPILE_FOR_WINDOWS true)

To run Ajokki (working title based on Finnish bus body manufacturer),
a demo program to check out some properties of Ylikuutio 3D engine:

$ ./ajokki

F to toggle flying on off, arrow keys work too.
F1 toggles help display and there you'll see some more options to try.

To run tests (coverage is still quite limited but underway):

$ ./unit_tests_with_Google_Test

Implemented functionality:
o 3D rendering
o 2D text
o support for different height map formats
o instant rebinding of instances of classes belonging to rendering hierchy
o callbacks

Future developments underway:
o in-game console
o mipmapping
o partially transparent 2D text
o 3D text
o multiple scenes in the same Universe
o coordinates relative to other objects, not only to Universe object
o collision detection between objects
o octree space partitioning
o possibility to create scenes with different spatial scales
o objects (species in Ylikuutio terminology) with modifiable vertices
o making holes in objects
o splitting of objects into 2 or more pieces
o cementing of 2 or more objects into one
o morphing between objects (Species in Ylikuutio terminology)
o morphing between objects (Species) and 3D text (Glyphs)
o ray casting for vertex selection and vertex modifications
o objects with 4 or more spatial dimensions,
  projected to 3D space before rendering to screen
o more shaders
o sky dome
o water
o more physics
o artificial intelligence (AI) creatures
o scripting language, possibly ChibiScheme
o visual pattern recognition for AI

contact info (found bugs and suggestions are very welcome!):
name:           Antti Nuortimo
GitHub:         https://github.com/nrz
Stack Overflow: http://stackoverflow.com/users/1310991/nrz
email:          ylikuutio at gmail dot com
                (please write 'ylikuutio' to email title to escape /dev/null)

Work offers are also very welcome!
